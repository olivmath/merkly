"use strict";
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
/* eslint-disable max-classes-per-file */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventEmitter = void 0;
const events_1 = require("events");
const wrapFunction = (fn) => (params) => fn(params.detail);
/**
 * This class copy the behavior of Node.js EventEmitter class.
 * It is used to provide the same interface for the browser environment.
 */
class EventEmitterAtBrowser extends EventTarget {
    constructor() {
        super(...arguments);
        this._listeners = {};
        this.maxListeners = Number.MAX_SAFE_INTEGER;
    }
    on(eventName, fn) {
        this.addEventListener(eventName, fn);
        return this;
    }
    once(eventName, fn) {
        const onceCallback = (params) => __awaiter(this, void 0, void 0, function* () {
            this.off(eventName, onceCallback);
            yield fn(params);
        });
        return this.on(eventName, onceCallback);
    }
    off(eventName, fn) {
        this.removeEventListener(eventName, fn);
        return this;
    }
    emit(eventName, params) {
        const event = new CustomEvent(eventName, { detail: params });
        return super.dispatchEvent(event);
    }
    listenerCount(eventName) {
        const eventListeners = this._listeners[eventName];
        return eventListeners ? eventListeners.length : 0;
    }
    listeners(eventName) {
        return this._listeners[eventName].map(value => value[0]) || [];
    }
    eventNames() {
        return Object.keys(this._listeners);
    }
    removeAllListeners() {
        Object.keys(this._listeners).forEach(event => {
            this._listeners[event].forEach((listener) => {
                super.removeEventListener(event, listener[1]);
            });
        });
        this._listeners = {};
        return this;
    }
    setMaxListeners(maxListeners) {
        this.maxListeners = maxListeners;
        return this;
    }
    getMaxListeners() {
        return this.maxListeners;
    }
    addEventListener(eventName, fn) {
        const wrappedFn = wrapFunction(fn);
        super.addEventListener(eventName, wrappedFn);
        if (!this._listeners[eventName]) {
            this._listeners[eventName] = [];
        }
        this._listeners[eventName].push([fn, wrappedFn]);
    }
    removeEventListener(eventName, fn) {
        const eventListeners = this._listeners[eventName];
        if (eventListeners) {
            const index = eventListeners.findIndex(item => item[0] === fn);
            if (index !== -1) {
                super.removeEventListener(eventName, eventListeners[index][1]);
                eventListeners.splice(index, 1);
            }
        }
    }
}
// eslint-disable-next-line import/no-mutable-exports
let EventEmitterType;
// Check if the code is running in a Node.js environment
if (typeof window === 'undefined') {
    EventEmitterType = events_1.EventEmitter;
}
else {
    // Fallback for the browser environment
    EventEmitterType = EventEmitterAtBrowser;
}
class EventEmitter extends EventEmitterType {
}
exports.EventEmitter = EventEmitter;
//# sourceMappingURL=event_emitter.js.map